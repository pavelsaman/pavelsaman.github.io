I"¬ƒ<p>Robot Framework is a useful tool for test automation. Itâ€™s mostly used, and suitable, for UI testing because it can be easily integrated with Selenium API. But there could also be many other libraries, either written by other people or we can come up with our own libraries that extend the number of use cases for which Robot could be used. Iâ€™ve recently needed to use Robot in a way when it looks into a DB and checks a few things there. Iâ€™m going to share with you a part of my outcome.</p>

<h3 id="structure">Structure</h3>

<p>First of all, having a certain structure for the whole test project is important. As the number of test cases grows, it becomes more and more difficult to know where you keep things (test cases, variables, page objects, â€¦). You can easily get lost in your project, only having to spend a lot of time every time you need to change a few test cases (or add new ones).</p>

<p>Having said that, I keep the following structure for my test project:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
â”œâ”€â”€ Keywords
â”œâ”€â”€ Libraries
â”œâ”€â”€ Objects
â”œâ”€â”€ README.md
â”œâ”€â”€ Resources
â”œâ”€â”€ Results
â”œâ”€â”€ Settings
â””â”€â”€ Tests
</code></pre></div></div>

<p>This is how an empty project in Robot looks when I use the tool. Of course I can further divide some of the folders, so a more real project would end up with a structure similar to this one:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
â”œâ”€â”€ arguments.txt
â”œâ”€â”€ Keywords
â”‚Â Â  â”œâ”€â”€ alpine_admin_keywords.txt
â”‚Â Â  â””â”€â”€ alpine_keywords.txt
â”œâ”€â”€ Libraries
â”‚Â Â  â”œâ”€â”€ AlpineDB.py
â”œâ”€â”€ Objects
â”‚Â Â  â”œâ”€â”€ alpine_admin_objects.py
â”‚Â Â  â”œâ”€â”€ alpine_objects.py
â”œâ”€â”€ README.md
â”œâ”€â”€ red.xml
â”œâ”€â”€ Resources
â”‚Â Â  â”œâ”€â”€ alpine_admin_test_data.py
â”‚Â Â  â”œâ”€â”€ alpine_sql.py
â”‚Â Â  â”œâ”€â”€ alpine_test_data.py
â”‚Â Â  â”œâ”€â”€ alpine_texts.py
â”‚Â Â  â”œâ”€â”€ alpine_variables.py
â”œâ”€â”€ Results
â”‚Â Â  â””â”€â”€ Screenshots
â”œâ”€â”€ Settings
â”‚Â Â  â”œâ”€â”€ alpine_admin_keywords.txt
â”‚Â Â  â”œâ”€â”€ alpine_admin_tests.txt
â”‚Â Â  â”œâ”€â”€ alpine_keywords.txt
â”‚Â Â  â””â”€â”€ alpine_tests.txt
â””â”€â”€ Tests
    â”œâ”€â”€ Admin
    â”‚Â Â  â””â”€â”€ login_page.robot
    â””â”€â”€ Eshop
        â””â”€â”€ login_registration.robot
</code></pre></div></div>

<p>Itâ€™s still pretty similar to the empty project structure, you can just see more subdirectories in <code class="highlighter-rouge">Tests/</code> where I try to keep things more structured, so I know where some particular tests are by just looking at it.</p>

<p>Anyway, this is the basis Iâ€™m gonna use in this article.</p>

<h3 id="db-library">DB Library</h3>

<p>As I said at the beginning, I want to write a library that connects to a MS SQL database and e.g. gets a number of rows for a particular sql statement. First, I didnâ€™t know much about this, but after some time spent googling, I found <code class="highlighter-rouge">pyodbc</code> module that does exactly what I need. So the first step would be to install it <code class="highlighter-rouge">pip install pyodbc</code>.</p>

<p>Robot framework allows you to write custom libraries in Python (more natural since Robot is basically a wrapper around Python) and Java. You can read all the details in the <a href="https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-test-libraries">official documentation</a>.</p>

<p>Ok, I canâ€™t use Java as efficiently as Python, so I go for Python here. However, another decision I need to make fairly early now is what scope I want to use with my library. Robot allows for either global, suite, or test case scope. Again, Iâ€™m not going to rewrite the official documentation here, just <a href="https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-library-scope">read it there</a>, if you want a more detailed explanation. Since I donâ€™t want to create a new instance for every test case where I use my library, Iâ€™m going to go for test suite scope.</p>

<p>So, a good start would be something like:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">robot.api</span> <span class="kn">import</span> <span class="n">logger</span>
<span class="kn">import</span> <span class="nn">pyodbc</span>


<span class="k">class</span> <span class="nc">AlpineDB</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""
    Library for connecting into AP MS SQL DB.

    = Table of content =
    - Keywords
    """</span>

    <span class="n">ROBOT_LIBRARY_VERSION</span> <span class="o">=</span> <span class="mf">1.0</span>
    <span class="n">ROBOT_LIBRARY_SCOPE</span> <span class="o">=</span> <span class="s">'TEST SUITE'</span>

    <span class="n">PARAM_SUBSTITUTE</span> <span class="o">=</span> <span class="s">'{}'</span>
    <span class="n">AP_SHOP_ID_CZ</span> <span class="o">=</span> <span class="mi">121</span>
    <span class="n">AP_SHOP_ID_SK</span> <span class="o">=</span> <span class="mi">1810</span>   

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="s">'https://inveo-alpineprocz.net'</span><span class="p">):</span>
        <span class="k">if</span> <span class="s">'dev'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s">'test'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="s">'{SQL Server}'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s">'server'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s">''</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pwd</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">if</span> <span class="s">'alpineprosk'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_SK</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_CZ</span>
        <span class="k">elif</span> <span class="s">'staging'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="s">'{SQL Server}'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s">'server1'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s">''</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pwd</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">if</span> <span class="s">'alpineprosk'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database1'</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_SK</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database2'</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_CZ</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">conn</span> <span class="o">=</span> <span class="n">pyodbc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">Driver</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="p">,</span>
                                   <span class="n">Server</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="p">,</span>
                                   <span class="n">Database</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">database</span><span class="p">,</span>
                                   <span class="n">uid</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span>
                                   <span class="n">pwd</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span>    

</code></pre></div></div>

<p>A few words about this. Iâ€™ve of course deleted all sensitive data like usernames, passwords, database names. I hope itâ€™s still understandable enough. The point here is I want to use this library with different environments (against different databases and servers), so I need to create the right connection first. Therefore, thereâ€™s a bit of logic in the <code class="highlighter-rouge">__init__</code> method.</p>

<p>As soon as I have the right connection into a database, I can write some methods that later become available as keywords in Robot framework. Letâ€™s start easy with a method that counts a number of rows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_sql_statement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql_statement</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
        <span class="s">"""
        Builds a SQL statemets given a SQL statements and parameters. String parameters are automatically enclosed in quotes, so no need to use quotes in params list.
        
        Example:
        | @{params}= | Create List | 1234 |
        | ${sql_statement}= | Build Sql Statement | Select * from [User] where UserId = {} | ${params} |
        """</span>
        <span class="c1"># enclose strings in quotes
</span>        <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">params</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="se">\'</span><span class="s">'</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">'</span><span class="se">\'</span><span class="s">'</span>     

        <span class="k">if</span> <span class="n">sql_statement</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">PARAM_SUBSTITUTE</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">console</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>

        <span class="c1"># add shopid condition
</span>        <span class="n">sql</span> <span class="o">=</span> <span class="n">sql_statement</span> <span class="o">+</span> <span class="s">' and ShopId='</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sql</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">row_count</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql_statement</span><span class="p">):</span>
        <span class="s">"""
        Returns a row count given a SQL statement.
        
        Example:
        | @{params}= | Create List | 1234 |
        | ${sql_statement}= | Build Sql Statement | Select * from [User] where UserId = {} | ${params} |
        | ${row_count}= | Row Count | ${sql_statement} |
        """</span>        
        <span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
        <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql_statement</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>
</code></pre></div></div>

<p>Instead of just one method, I also wrote method <code class="highlighter-rouge">build_sql_statement</code>. Thatâ€™s because I want to keep just sql templates that could be used with different conditions. I want to hard code as few things as possible. Plus the part with <code class="highlighter-rouge">ShopId</code> is very much specific to my project. It turned out that one of the databases is shared across more than one test environment. The parameter that distinguishes whether a particular row belongs to this or that environment is <code class="highlighter-rouge">ShopId</code>, so thatâ€™s why I have this little logic here when building sql statements.</p>

<p>Method <code class="highlighter-rouge">row_count</code> is just a simple one, I guess no explanation is needed here.</p>

<p>Also notice that because Iâ€™m gonna use this library with Robot framework, Iâ€™m using <code class="highlighter-rouge">robot.api</code> and <code class="highlighter-rouge">logger</code>. Iâ€™m also using a particular <a href="https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#writing-documentation">documentation style</a> that allows for auto-generation of documentation for this library. It comes in handy when someone else wants to use the library after me.</p>

<p>Just to summarize, the whole library at this point looks like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">robot.api</span> <span class="kn">import</span> <span class="n">logger</span>
<span class="kn">import</span> <span class="nn">pyodbc</span>


<span class="k">class</span> <span class="nc">AlpineDB</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""
    Library for connecting into AP MS SQL DB.

    = Table of content =
    - Keywords
    """</span>

    <span class="n">ROBOT_LIBRARY_VERSION</span> <span class="o">=</span> <span class="mf">1.0</span>
    <span class="n">ROBOT_LIBRARY_SCOPE</span> <span class="o">=</span> <span class="s">'TEST SUITE'</span>

    <span class="n">PARAM_SUBSTITUTE</span> <span class="o">=</span> <span class="s">'{}'</span>
    <span class="n">AP_SHOP_ID_CZ</span> <span class="o">=</span> <span class="mi">121</span>
    <span class="n">AP_SHOP_ID_SK</span> <span class="o">=</span> <span class="mi">1810</span>   

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="s">'https://inveo-alpineprocz.net'</span><span class="p">):</span>
        <span class="k">if</span> <span class="s">'dev'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s">'test'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="s">'{SQL Server}'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s">'server'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s">''</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pwd</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">if</span> <span class="s">'alpineprosk'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_SK</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_CZ</span>
        <span class="k">elif</span> <span class="s">'staging'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">driver</span> <span class="o">=</span> <span class="s">'{SQL Server}'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s">'server1'</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s">''</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pwd</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">if</span> <span class="s">'alpineprosk'</span> <span class="ow">in</span> <span class="n">url</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database1'</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_SK</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s">'database2'</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">AP_SHOP_ID_CZ</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">conn</span> <span class="o">=</span> <span class="n">pyodbc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">Driver</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">driver</span><span class="p">,</span>
                                   <span class="n">Server</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="p">,</span>
                                   <span class="n">Database</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">database</span><span class="p">,</span>
                                   <span class="n">uid</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="p">,</span>
                                   <span class="n">pwd</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span>   

    <span class="k">def</span> <span class="nf">build_sql_statement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql_statement</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
        <span class="s">"""
        Builds a SQL statemets given a SQL statements and parameters. String parameters are automatically enclosed in quotes, so no need to use quotes in params list.
        
        Example:
        | @{params}= | Create List | 1234 |
        | ${sql_statement}= | Build Sql Statement | Select * from [User] where UserId = {} | ${params} |
        """</span>
        <span class="c1"># enclose strings in quotes
</span>        <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">params</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="s">'</span><span class="se">\'</span><span class="s">'</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">'</span><span class="se">\'</span><span class="s">'</span>     

        <span class="k">if</span> <span class="n">sql_statement</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">PARAM_SUBSTITUTE</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="p">):</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">console</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>
            <span class="k">raise</span> <span class="nb">AssertionError</span><span class="p">(</span><span class="s">'SQL statement requires different number of parameters.'</span><span class="p">)</span>

        <span class="c1"># add shopid condition
</span>        <span class="n">sql</span> <span class="o">=</span> <span class="n">sql_statement</span> <span class="o">+</span> <span class="s">' and ShopId='</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">shop_id</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">sql</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">row_count</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql_statement</span><span class="p">):</span>
        <span class="s">"""
        Returns a row count given a SQL statement.
        
        Example:
        | @{params}= | Create List | 1234 |
        | ${sql_statement}= | Build Sql Statement | Select * from [User] where UserId = {} | ${params} |
        | ${row_count}= | Row Count | ${sql_statement} |
        """</span>        
        <span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
        <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql_statement</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">())</span>

</code></pre></div></div>

<p>It doesnâ€™t do much, but itâ€™s a good start, more methods could be easily added into this structure.</p>

<p>All I need to do is save this as a new python file inside <code class="highlighter-rouge">&lt;my_project&gt;/Libraries/</code>.</p>

<p>One last note on this. Notice the default parameter value of <code class="highlighter-rouge">url</code> in <code class="highlighter-rouge">__init__</code>. Thatâ€™s not so much because I really want to use it like this, but because I use Eclipse and RED as my IDEs for Robot framework and Eclipse/RED has a particular bug here that doesnâ€™t allow for object creation (AlpineDB in my example) when no default value is not present. The symptoms of this are that the whole library would be marked as invalid when I have my project open in Eclipse/RED, which complicates things like seeing documentation for my custom library or using intellisense. However, when run, thereâ€™s no problem even without the default value. So itâ€™s basically just a bit more comfortable to use this workaround.</p>

<h3 id="robot-framework">Robot Framework</h3>

<p>Letâ€™s now use this library inside Robot framework.</p>

<p>To keep the structure, Iâ€™m gonna first create a new test suite inside <code class="highlighter-rouge">&lt;my_project&gt;/Tests/</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>db.robot
</code></pre></div></div>

<p>Then letâ€™s check if only one user exists in a database using my library from above:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*** Settings ***
Documentation    Database checks and tests.  
Resource    ../Settings/alpine_tests.txt
Library    ../Libraries/AlpineDB.py    ${URL_DEV}

*** Variables ***
${no_user_in_db}=    User was not found in DB.
${too_many_users_in_db}=    User was not found in DB.

*** Test Cases ***
One User Exists In Database
    [Tags]    smoke    db
    ${params}=    Create List    ${valid_username}
    ${sql_statement}=    Build Sql Statement    ${select_user_by_email}    ${params}
    ${number_of_users}=    Row Count    ${sql_statement}
    Run Keyword If    ${number_of_users} == 0    Fail    ${no_user_in_db}
    Run Keyword If    ${number_of_users} &gt; 1    Fail    ${too_many_users_in_db}
</code></pre></div></div>

<p>As you can see, I try to avoid hard-coded values. So Iâ€™m just using variables that live inside files in <code class="highlighter-rouge">&lt;my_project&gt;/Resources</code> and are imported here via file <code class="highlighter-rouge">&lt;my_project&gt;/Settings/alpine_tests.txt</code>.</p>

<p>Iâ€™ve also mentioned something about sql templates. Thatâ€™s exactly what Iâ€™m using here. One such template is in variable <code class="highlighter-rouge">${select_user_by_email}</code>, the value of this variable is in fact <code class="highlighter-rouge">select_user_by_email = 'Select * from [User] u where u.Email={}'</code>, this lives inside <code class="highlighter-rouge">&lt;my_project&gt;/Resources/alpine_sql.py</code> and is again imported via <code class="highlighter-rouge">&lt;my_project&gt;/Settings/alpine_tests.txt</code>. It helps keep things organised, because I can keep all sql statements in one file, so no need to look at various places if I want to change something.</p>

<p>The rest is probably clear enough, notice how my python methods have become keywords here in Robot. So I can easily call my <code class="highlighter-rouge">row_count</code> using keyword <code class="highlighter-rouge">Row Count</code> and my <code class="highlighter-rouge">build_sql_statement</code> using keyword <code class="highlighter-rouge">Build Sql Statement</code>.</p>

<p>Iâ€™ll leave running the test case up to you, but youâ€™d do something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>robot <span class="nt">--argumentfile</span> ../arguments.txt <span class="nt">--test</span> <span class="s2">"One User Exists In Database"</span> db.robot
</code></pre></div></div>

<p>Based on how you set it up, youâ€™d get reports and logs. In my case, I have them timestamped (<code class="highlighter-rouge">--timestampoutput</code> option inside <code class="highlighter-rouge">&lt;my_project&gt;/arguments.txt</code>) and saved (option <code class="highlighter-rouge">--outputdir ../Results</code> inside <code class="highlighter-rouge">&lt;my_project&gt;/arguments.txt</code>) into <code class="highlighter-rouge">&lt;my_project&gt;/Results</code>.</p>

<h3 id="documentation">Documentation</h3>

<p>I mentioned something about auto-generating the documentation for my library. It canâ€™t be easier, all you need to do is follow the guidlines on how to write comments in the source file and then execute <code class="highlighter-rouge">python.libdoc</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python <span class="nt">-m</span> python.libdoc <span class="nt">-f</span> html AlpineDB.py AlpineDB_Library.html
</code></pre></div></div>

<p>It will generate a file in the format that you know from <a href="https://robotframework.org/robotframework/latest/libraries/BuiltIn.html">official Robot documentation</a>.</p>

<p>I strongly recommend using it, especially if youâ€™re not the only Tester thatâ€™s gonna use your libraries.</p>

<h3 id="not-reinventing-the-wheel">Not Reinventing The Wheel</h3>

<p>Itâ€™d be strange if I was the first one to think about this topic. Of course other people have done exactly that before me. But I think itâ€™s always a good thing to take things apart and learn how they work, thatâ€™s why I wrote my own simple database library.</p>

<p>However, if you donâ€™t want to do the same, just use whatâ€™s already done. There is a <a href="https://franz-see.github.io/Robotframework-Database-Library/api/0.5/DatabaseLibrary.html">database library</a> already written, you can get in on <a href="https://pypi.org/project/robotframework-databaselibrary/">pypi.org</a> and see documentation <a href="https://franz-see.github.io/Robotframework-Database-Library/api/0.5/DatabaseLibrary.html">here</a>.</p>

:ET