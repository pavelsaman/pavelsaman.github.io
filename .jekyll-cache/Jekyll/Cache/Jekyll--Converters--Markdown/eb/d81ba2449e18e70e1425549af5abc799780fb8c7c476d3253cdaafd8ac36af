I"ª4<p>Awk is a useful tool for text processing. Iâ€™ve recently wanted to process a log generated by Network Manager. Iâ€™ll show you just a simple awk script that helped me get the data I wanted. I find it useful to get some practice in awk, so Iâ€™ll try out some awk oneliners here.</p>

<p>The log is in two file in <code class="highlighter-rouge">/var/log</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-rw-r--r--</span>   1 root   root            4.6K Sep 20 15:10 NetworkManager-dispatcher.d.log
<span class="nt">-rw-r--r--</span>   1 root   root             11K Sep 15 00:00 NetworkManager-dispatcher.d.log.1
</code></pre></div></div>

<p>The file content is in the following format (I deleted the real UUID of my networks):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2019-09-20T20:55:14,334287331+00:00 | DEVICE: wlp2s0 | STATUS: down | UUID: xxx | ID: akula | IP4_GATEWAY:  | IP4_NAMESERVERS: 
2019-09-08T08:36:29,311656818+00:00 | DEVICE: eno1 | STATUS: up | UUID: xxx | ID: Wired connection 1 | IP4_GATEWAY: 192.168.1.1 | IP4_NAMESERVERS: 8.8.8.8
2019-09-08T09:15:36,751701614+00:00 | DEVICE: eno1 | STATUS: down | UUID: xxx | ID: Wired connection 1 | IP4_GATEWAY:  | IP4_NAMESERVERS: 
2019-09-08T10:03:08,171797403+00:00 | DEVICE: eno1 | STATUS: up | UUID: xxx | ID: Wired connection 1 | IP4_GATEWAY: 192.168.1.1 | IP4_NAMESERVERS: 8.8.8.8
2019-09-08T11:37:24,046263858+00:00 | DEVICE: eno1 | STATUS: down | UUID: xxx | ID: Wired connection 1 | IP4_GATEWAY:  | IP4_NAMESERVERS: 
2019-09-08T11:48:09,947160296+00:00 | DEVICE: eno1 | STATUS: up | UUID: xxx | ID: Wired connection 1 | IP4_GATEWAY: 192.168.1.1 | IP4_NAMESERVERS: 8.8.8.8
</code></pre></div></div>

<p>For every <code class="highlighter-rouge">up</code> or <code class="highlighter-rouge">down</code> status, thereâ€™s one line with date and time, device name, status, UUID of the network, ID of the network, IPv4 address, and an array of nameservers.</p>

<p>Iâ€™ll now run a few awk commands to process the file and get some interesting statistics.</p>

<h4 id="i-want-to-know-how-many-times-ive-connected-to-a-network">I want to know how many times Iâ€™ve connected to a network</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'($3 ~ /up/) { c++ } END {print c}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<p>No need to write <code class="highlighter-rouge">if</code>, I can just type <code class="highlighter-rouge">(pattern)</code> and apply <code class="highlighter-rouge">{action}</code>.</p>

<h4 id="i-want-to-know-what-networks-ive-connected-to">I want to know what networks Iâ€™ve connected to</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'($3 ~ /up/) {net[$4]++} END{for (n in net) {print substr(n,2)}}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<p>Awk has some functions I can use. I can even create my own functions in awk.</p>

<h4 id="i-want-to-know-what-networks-ive-connected-to--how-many-times">I want to know what networks Iâ€™ve connected to + how many times</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'{ntw=substr($4,index($4,":")+2,length(substr($4,index($4,":")+2))-1)} ($3 ~ /up/) {net[ntw]++} END{for (n in net) {print n,net[n]}}'</span> <span class="nv">OFS</span><span class="o">=</span><span class="s1">'|'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">OFS</code> changes the Output Field Separator. I can also beautify the output by getting rif od some whitespaces etc. by using <code class="highlighter-rouge">substr</code>, <code class="highlighter-rouge">index</code>, and <code class="highlighter-rouge">length</code> functions.</p>

<h4 id="i-want-to-add-the-network-id-to-the-previous-output">I want to add the network ID to the previous output</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'($3 ~ /up/) {net[substr($5,index($5,":")+2,length(substr($5,index($5,":")+2))-1) "|" substr($4,index($4,":")+2,length(substr($4,index($4,":")+2))-1)]++} END{for (n in net) {print n,net[n]}}'</span> <span class="nv">OFS</span><span class="o">=</span><span class="s1">'|'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<p>In awk I can really play around with the key of an associative array.</p>

<h4 id="if-i-want-to-put-the-previous-oneliner-into-a-script-file">If I want to put the previous oneliner into a script file</h4>

<div class="language-awk highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/awk -f</span>

<span class="kr">BEGIN</span> <span class="p">{</span>
	<span class="kc">FS</span><span class="o">=</span><span class="s2">"|"</span><span class="p">;</span>
	<span class="kc">OFS</span><span class="o">=</span><span class="s2">"|"</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$3</span> <span class="o">~</span> <span class="sr">/up/</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">net</span><span class="p">[</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$5</span><span class="p">,</span><span class="nb">index</span><span class="p">(</span><span class="nv">$5</span><span class="p">,</span><span class="s2">":"</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nb">length</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$5</span><span class="p">,</span><span class="nb">index</span><span class="p">(</span><span class="nv">$5</span><span class="p">,</span><span class="s2">":"</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="s2">"|"</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$4</span><span class="p">,</span><span class="nb">index</span><span class="p">(</span><span class="nv">$4</span><span class="p">,</span><span class="s2">":"</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nb">length</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$4</span><span class="p">,</span><span class="nb">index</span><span class="p">(</span><span class="nv">$4</span><span class="p">,</span><span class="s2">":"</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kr">END</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">(</span><span class="nx">n</span> <span class="o">in</span> <span class="nx">net</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span> <span class="nx">n</span><span class="p">,</span><span class="nx">net</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Awk can be run as a script just like a bash script. This is definitely more neat when the script grows in length.</p>

<h4 id="i-want-to-sort-the-previous-output-by-the-number-of-connections">I want to sort the previous output by the number of connections</h4>

<p>Provided I saved the previous script as a file <code class="highlighter-rouge">network_connections.awk</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./network_connections.awk /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span> | <span class="nb">sort</span> <span class="nt">-t</span><span class="s1">'|'</span> <span class="nt">-n</span> <span class="nt">-r</span> <span class="nt">-k</span> 3
</code></pre></div></div>

<p>The first line is the most used network on my machine.</p>

<h4 id="i-want-to-know-what-ip-addresses-ive-had">I want to know what IP addresses Iâ€™ve had</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'($3 ~ /up/) {net[$6]++} END{for (n in net) {print substr(n,2)}}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<p>Awk has associative arrays, so itâ€™s easy to use some data as a key.</p>

<h4 id="i-want-to-create-a-file-named-after-an-id-of-a-connection-and-save-all-times-ive-connected-to-such-a-network-into-the-file">I want to create a file named after an ID of a connection and save all times Iâ€™ve connected to such a network into the file</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'{file_name=substr($5,index($5,":")+2,length(substr($5,index($5,":")+2))-1)} ($3 ~ /up/) {print $1 &gt; file_name}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<h4 id="i-want-to-print-only-lines-with-a-connection-i-hand-to-awk-in-a-variable-net">I want to print only lines with a connection I hand to awk in a variable <code class="highlighter-rouge">NET</code></h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-v</span> <span class="nv">NET</span><span class="o">=</span><span class="s2">"akula"</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'{ntw=substr($5,index($5,":")+2,length(substr($5,index($5,":")+2))-1)} ($3 ~ /up/ &amp;&amp; ntw == NET) {print}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span>
</code></pre></div></div>

<h4 id="i-want-to-know-how-many-times-ive-connected-to-a-network-and-sort-it-desc">I want to know how many times Iâ€™ve connected to a network and sort it desc</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">awk</span> <span class="nt">-F</span><span class="s1">'|'</span> <span class="s1">'($3 ~ /up/) {x[substr($1, 0, index($1, "T")-1)]++} END{for (n in x) {print n,x[n]}}'</span> /var/log/NetworkManager-dispatcher.d.log<span class="k">*</span> | <span class="nb">sort</span> <span class="nt">-h</span> <span class="nt">-k2</span> <span class="nt">-r</span>
</code></pre></div></div>

<p>Awk can create files for me and I can use redirection in awk.</p>

<p>This is how awk works. Just a few notes at the end:</p>
<ol>
  <li>awk uses pattern-action patters; patterns are in <code class="highlighter-rouge">()</code>, actions in <code class="highlighter-rouge">{}</code>, when a pattern gets evaluated to true, action is taken</li>
  <li>awk uses associative arrays, so itâ€™s easy to use a piece of data as a key</li>
  <li>there are some built-in variables in awk:
<img src="/images/awk_vars.png" alt="image" /></li>
  <li>itâ€™s possible to write a script in awk and save it as a file, the first line would be <code class="highlighter-rouge"><span class="c1">#!/usr/bin/awk</span></code></li>
  <li>awk can redirect output to a file, itâ€™s even possible to use shell from within an awk script</li>
  <li>awk works with regular expressions that are enclosed in <code class="highlighter-rouge">//</code>, unlike grep for example</li>
  <li>to hand a variable from shell to awk, I can use option <code class="highlighter-rouge">-v</code>, such a variable will not be available in <code class="highlighter-rouge">BEGIN</code> block though</li>
  <li>awk can also read an env variable <code class="highlighter-rouge">ENVIRON["MY_VAR"]</code>, this can be used even in <code class="highlighter-rouge">BEGIN</code> block</li>
</ol>

<p>All in all, with a couple of characters, awk lets you do a lot with any text. Itâ€™s worth it to know how to use it.
If you want to see more examples, you can go into my <a href="https://github.com/pavelsaman/AwkWorkspace">AwkWorkspace repository on github</a> or <a href="https://github.com/pavelsaman/Awk-lib">see some of my awk libraries</a>.</p>
:ET